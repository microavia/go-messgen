// Code generated by messgen. DO NOT EDIT.

package message

import (
	"encoding/binary"
	"fmt"
	"math"

	"github.com/microavia/go-messgen/internal/generator/golang/testdata/messgen"
)

type Message6 struct {
	Field6 float64
	Field2 [7]int32
	Field4 []Message10
	Field3 []int16
	Field5 string
}

const Message6MsgId = 6
const Message6MinMsgSize = 48

func (v *Message6) MsgId() int {
	return 6
}

func (v *Message6) MsgSize() int {
	return 36 + 4 + func(a []Message10) int {
		sz := 0
		for _, i := range a {
			sz += i.MsgSize()
		}
		return sz
	}(v.Field4) + 4 + 2*len(v.Field3) + 4 + 1*len(v.Field5)
}

func (v *Message6) Pack(buf []byte) (int, error) {
	if len(buf) < v.MsgSize() {
		return 0, fmt.Errorf("invalid buffer size for packing Message6: %d, should be >=%d", len(buf), v.MsgSize())
	}
	ptr := 0
	binary.LittleEndian.PutUint64(buf[ptr:], math.Float64bits(v.Field6))
	ptr += 8
	for i := 0; i < 7; i++ {
		binary.LittleEndian.PutUint32(buf[ptr:], uint32(v.Field2[i]))
		ptr += 4
	}
	binary.LittleEndian.PutUint32(buf[ptr:], uint32(len(v.Field4)))
	ptr += 4
	for i := 0; i < len(v.Field4); i++ {
		pn, err := v.Field4[i].Pack(buf[ptr:])
		if err != nil {
			return 0, err
		}
		ptr += pn
	}
	binary.LittleEndian.PutUint32(buf[ptr:], uint32(len(v.Field3)))
	ptr += 4
	for i := 0; i < len(v.Field3); i++ {
		binary.LittleEndian.PutUint16(buf[ptr:], uint16(v.Field3[i]))
		ptr += 2
	}
	messgen.WriteString(buf[ptr:], v.Field5)
	ptr += 4 + len(v.Field5)
	return ptr, nil
}

func (v *Message6) Unpack(buf []byte) error {
	if len(buf) < Message6MinMsgSize {
		return fmt.Errorf("invalid buffer size for unpacking Message6: %d, should be >=%d", len(buf), Message6MinMsgSize)
	}
	ptr := 0
	v.Field6 = math.Float64frombits(binary.LittleEndian.Uint64(buf[ptr:]))
	ptr += 8
	for i := 0; i < 7; i++ {
		v.Field2[i] = int32(binary.LittleEndian.Uint32(buf[ptr:]))
		ptr += 4
	}
	{
		n := int(binary.LittleEndian.Uint32(buf[ptr:]))
		ptr += 4
		v.Field4 = make([]Message10, n)
		for i := 0; i < n; i++ {
			err := v.Field4[i].Unpack(buf[ptr:])
			if err != nil {
				return err
			}
			ptr += v.Field4[i].MsgSize()
		}
	}
	{
		n := int(binary.LittleEndian.Uint32(buf[ptr:]))
		ptr += 4
		v.Field3 = make([]int16, n)
		for i := 0; i < n; i++ {
			v.Field3[i] = int16(binary.LittleEndian.Uint16(buf[ptr:]))
			ptr += 2
		}
	}
	v.Field5 = messgen.ReadString(buf[ptr:])
	ptr += 4 + len(v.Field5)
	return nil
}

func (v *Message6) String() string {
	return fmt.Sprintf("<Message6 field6=%v field2=%v field4=%v field3=%v field5=%v>",
		v.Field6, v.Field2, v.Field4, v.Field3, v.Field5)
}
