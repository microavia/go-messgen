// Code generated by go-messgen. DO NOT EDIT.

{{$InternalPrefix := "int_"}}

package {{.Module.Protocol}}

import (
	"bytes"
	"errors"
	"fmt"
	"math/rand"
)

var (
	_ = fmt.Sprintf
	_ = bytes.NewBuffer
	_ = errors.New
	_ = rand.Intn
)

{{$Module := .}}

{{range $Message := $Module.Messages}}
{{$MessageName := CamelCase $Message.Name}}

func {{$InternalPrefix}}{{$MessageName}}Rand() {{$MessageName}} {
    v := {{$MessageName}}{}


	{{range $Field := $Message.Fields -}}
		{{- if HasPostfix $Field.Name "_slice_empty" -}}
			v.{{CamelCase $Field.Name}} = []{{CamelCase $Field.Type.Name}}{} // {{$Field.Name}} {{$Field.Type.String}}
		{{- else if and $Field.Type.Array $Field.Type.ArraySize -}}
			{{$InternalPrefix}}{{CamelCase $Field.Type.Name}}ArrayRand(v.{{CamelCase $Field.Name}}[:]) // {{$Field.Name}} {{$Field.Type.String}}
		{{- else if $Field.Type.Array -}}
		    v.{{CamelCase $Field.Name}} = {{$InternalPrefix}}{{CamelCase $Field.Type.Name}}SliceRand(rand.Intn(16)) // {{$Field.Name}} {{$Field.Type.String}}
		{{- else -}}
		    v.{{CamelCase $Field.Name}} = {{$InternalPrefix}}{{CamelCase $Field.Type.Name}}Rand() // {{$Field.Name}} {{$Field.Type.String}}
		{{end}}
    {{end -}}

    return v
}

func {{$InternalPrefix}}{{$MessageName}}SliceRand(l int) ([]{{$MessageName}}) {
	out := make([]{{$MessageName}}, l)

	{{$InternalPrefix}}{{$MessageName}}ArrayRand(out)

	return out
}

func {{$InternalPrefix}}{{$MessageName}}ArrayRand(out []{{$MessageName}}) {
	for i := range out {
		out[i] = {{$InternalPrefix}}{{$MessageName}}Rand()
	}
}
    
////////////////////////////////////////////////////////////
{{end}}
