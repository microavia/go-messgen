// Code generated by go-messgen. DO NOT EDIT.

{{$InternalPrefix := "int_"}}

package {{.Module.Protocol}}

import (
	"bytes"
	"errors"
	"fmt"
)

var (
	_ = fmt.Sprintf
	_ = bytes.NewBuffer
	_ = errors.New
)

var (
	ErrSizeMismatched = errors.New("size mismatched")
	ErrInvalidBufferSize  = errors.New("invalid buffer size")
)

{{$Module := .}}

{{range $Message := $Module.Messages}}
{{$MessageName := CamelCase $Message.Name}}
{{$MessageSize := MinSizeByName $Message.Name $Module}}

type {{$MessageName}} struct {
	{{range $Field := $Message.Fields -}}
    	{{CamelCase $Field.Name}} {{if $Field.Type.Array}}[{{if $Field.Type.ArraySize}}{{$Field.Type.ArraySize}}{{end}}]{{end}}{{CamelCase $Field.Type.Name}} // {{$Field.Name}} {{if $Field.Type.Array}}[{{if $Field.Type.ArraySize}}{{$Field.Type.ArraySize}}{{end}}]{{end}}{{$Field.Type.Name}}
	{{end -}}
}

const(
	{{$MessageName}}ID      = {{$Message.ID}}
	{{$MessageName}}MinSize = {{$MessageSize.MinSize}}
)

func (v {{$MessageName}}) ID() int {
	return {{$MessageName}}ID
}

func {{$InternalPrefix}}{{$MessageName}}SliceSize(v []{{$MessageName}}) int {
	{{if $MessageSize.Dynamic -}}
	res := 0

	for _, u := range v {
		res += {{$InternalPrefix}}{{$MessageName}}Size(u)
	}

	return res
	{{else -}}
	return len(v) * {{$MessageName}}MinSize
	{{end}}
}

func {{$InternalPrefix}}{{$MessageName}}Size(v {{$MessageName}}) int {
	{{if $MessageSize.Dynamic -}}
		return {{range $Field := $Message.Fields -}}
			{{- if and $Field.Type.Array $Field.Type.ArraySize -}}
				{{$InternalPrefix}}{{CamelCase $Field.Type.Name}}SliceSize(v.{{CamelCase $Field.Name}}[:]) + // {{$Field.Name}} {{$Field.Type.String}}
			{{- else if $Field.Type.Array -}}
				4 + {{$InternalPrefix}}{{CamelCase $Field.Type.Name}}SliceSize(v.{{CamelCase $Field.Name}}) + // {{$Field.Name}} {{$Field.Type.String}}
			{{- else -}}
				{{$InternalPrefix}}{{CamelCase $Field.Type.Name}}Size(v.{{CamelCase $Field.Name}}) + // {{$Field.Name}} {{$Field.Type.String}}
			{{end}}
    	{{end -}}
		0
	{{else -}}
		return {{$MessageName}}MinSize
    {{end -}}
}

func (v {{$MessageName}}) Size() int {
	return {{$InternalPrefix}}{{$MessageName}}Size(v)
}

func (v {{$MessageName}}) String() string {
	return fmt.Sprintf("<{{$MessageName}}{{range $Message.Fields}} {{.Name}}=%v{{end}}>",
		{{range $Message.Fields}}v.{{CamelCase .Name}},{{end}})
}

func {{$InternalPrefix}}{{$MessageName}}ArrayWrite(w Writer, l []{{$MessageName}}) (int, error) {
	size := 0

	for _, v := range l {
		n, err := {{$InternalPrefix}}{{$MessageName}}Write(w, v)
		if err != nil {
			return size+n, err
		}

		size += n
	}

	return size, nil
}

func {{$InternalPrefix}}{{$MessageName}}SliceWrite(w Writer, l []{{$MessageName}}) (int, error) {
	size := 0

	n, err := {{$InternalPrefix}}uint32Write(w, uint32(len(l)))
	if err != nil {
		return size + n, err
	}

	size += n

	n, err = {{$InternalPrefix}}{{$MessageName}}ArrayWrite(w, l)

	return size+n, nil
}


func {{$InternalPrefix}}{{$MessageName}}Write(w Writer, v {{$MessageName}}) (int, error) {
	var (
		size int
		n    int
		err  error
	)

	{{range $Field := $Message.Fields -}}
		{{if and $Field.Type.Array $Field.Type.ArraySize}}
			n, err = {{$InternalPrefix}}{{CamelCase $Field.Type.Name}}ArrayWrite(w, v.{{CamelCase $Field.Name}}[:]) // {{$Field.Name}} {{$Field.Type.String}}
		{{else if $Field.Type.Array}}
			n, err = {{$InternalPrefix}}{{CamelCase $Field.Type.Name}}SliceWrite(w, v.{{CamelCase $Field.Name}}) // {{$Field.Name}} {{$Field.Type.String}}
		{{else}}
			n, err = {{$InternalPrefix}}{{CamelCase $Field.Type.Name}}Write(w, v.{{CamelCase $Field.Name}}) // {{$Field.Name}} {{$Field.Type.String}}
		{{end -}}
			if err != nil {
				return size + n, err
			}

			size += n
	{{end}}

	return size, nil
}

func (v {{$MessageName}}) Pack(b []byte) (int, error) {
	size := v.Size()
	if len(b) < size {
		return 0, fmt.Errorf("invalid buffer size for packing '{{$Message.Name}}': %d, should be >=%d: %w", len(b), v.Size(), ErrInvalidBufferSize)
	}

	n, err := {{$InternalPrefix}}{{$MessageName}}Write(bytes.NewBuffer(b[:0]), v)
	if err != nil {
		return n, err
	}

	if n != size {
		return n, fmt.Errorf("actual %d, expected %d: %w", n, size, ErrSizeMismatched)
	}

	return n, nil
}

func {{$InternalPrefix}}{{$MessageName}}ArrayRead(r Reader, out []{{$MessageName}}) error {
	var err error

	for i := 0; i < len(out); i++ {
		if out[i], err = {{$InternalPrefix}}{{$MessageName}}Read(r); err != nil {
			return err
		}
	}

	return nil
}

func {{$InternalPrefix}}{{$MessageName}}SliceRead(r Reader) ([]{{$MessageName}}, error) {
	l, err := {{$InternalPrefix}}uint32Read(r)
	if err != nil {
		return nil, err
	}

	out := make([]{{$MessageName}}, l)

	err = {{$InternalPrefix}}{{$MessageName}}ArrayRead(r, out)

	return out, err
}

func {{$InternalPrefix}}{{$MessageName}}Read(r Reader) ({{$MessageName}}, error) {
	var (
		out {{$MessageName}}
		err error
	)

	{{range $Field := $Message.Fields -}}
		{{if and $Field.Type.Array $Field.Type.ArraySize}}
			err = {{$InternalPrefix}}{{CamelCase $Field.Type.Name}}ArrayRead(r, out.{{CamelCase $Field.Name}}[:]) // {{$Field.Name}} {{$Field.Type.String}}
		{{else if $Field.Type.Array}}
			out.{{CamelCase $Field.Name}}, err = {{$InternalPrefix}}{{CamelCase $Field.Type.Name}}SliceRead(r) // {{$Field.Name}} {{$Field.Type.String}}
		{{else}}
			out.{{CamelCase $Field.Name}}, err = {{$InternalPrefix}}{{CamelCase $Field.Type.Name}}Read(r) // {{$Field.Name}} {{$Field.Type.String}}
		{{end -}}
		if err != nil {
			return out, err
		}
	{{end}}

	return out, nil
}
	

func (v *{{$MessageName}}) Unpack(buf []byte) error {
	if len(buf) < {{$MessageName}}MinSize {
		return fmt.Errorf("invalid buffer size for unpacking '{{$Message.Name}}': %d, should be >=%d: %w", len(buf), {{$MessageName}}MinSize, ErrInvalidBufferSize)
	}

	out, err := {{$InternalPrefix}}{{$MessageName}}Read(bytes.NewBuffer(buf))
	if err != nil {
		return err
	}

	*v = out

	return nil
}


////////////////////////////////////////////////////////////
{{end}}
