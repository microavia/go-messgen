// Code generated by go-messgen. DO NOT EDIT.

{{$InternalPrefix := "int_"}}

package {{.Module.Protocol}}

import (
    "math/rand"
)

func {{$InternalPrefix}}charRand() char       { return char(rand.Intn(256)) }
func {{$InternalPrefix}}doubleRand() double   { return double(rand.Float64()) }
func {{$InternalPrefix}}floatRand() float     { return float(rand.Float32()) }
func {{$InternalPrefix}}float32Rand() float32 { return float32(rand.Float32()) }
func {{$InternalPrefix}}float64Rand() float64 { return float64(rand.Float32()) }
func {{$InternalPrefix}}int16Rand() int16     { return int16(rand.Intn(65536)) }
func {{$InternalPrefix}}int32Rand() int32     { return int32(rand.Int31()) }
func {{$InternalPrefix}}int64Rand() int64     { return int64(rand.Int63()) }
func {{$InternalPrefix}}int8Rand() int8       { return int8(rand.Intn(256)) }
func {{$InternalPrefix}}uint16Rand() uint16   { return uint16(rand.Intn(65536)) }
func {{$InternalPrefix}}uint32Rand() uint32   { return uint32(rand.Int31()) }
func {{$InternalPrefix}}uint64Rand() uint64   { return uint64(rand.Int63()) }
func {{$InternalPrefix}}uint8Rand() uint8     { return uint8(rand.Intn(256)) }

func {{$InternalPrefix}}stringRand() string   {
	out := make([]byte, rand.Intn(256))

	for i := range out {
		out[i] = byte(33+rand.Intn(126-33))
	}

	return string(out)
}

{{range $TypeName := ListStrings "char" "double" "float" "float32" "float64" "int16" "int32" "int64" "int8" "uint16" "uint32" "uint64" "uint8" "string" -}}
func {{$InternalPrefix}}{{$TypeName}}SliceRand(l int) ([]{{$TypeName}}) {
	out := make([]{{$TypeName}}, l)

	{{$InternalPrefix}}{{$TypeName}}ArrayRand(out)

	return out
}

func {{$InternalPrefix}}{{$TypeName}}ArrayRand(out []{{$TypeName}}) {
	for i := range out {
		out[i] = {{$InternalPrefix}}{{$TypeName}}Rand()
	}
}

{{end}}
