// Code generated by go-messgen. DO NOT EDIT.

{{$InternalPrefix := "int_"}}

package {{.Module.Protocol}}

import (
	"encoding/binary"
	"fmt"
	"io"
	"math"
	"strconv"
	"unsafe"
)

type (
	char   = byte
	double = float64
	float  = float32
)

func charString(v char) string       { return strconv.FormatUint(uint64(v), 10) }
func doubleString(v double) string   { return fmt.Sprintf("%v", v) }
func floatString(v float) string     { return fmt.Sprintf("%v", v) }
func float32String(v float32) string { return fmt.Sprintf("%v", v) }
func float64String(v float64) string { return fmt.Sprintf("%v", v) }
func int16String(v int16) string     { return strconv.FormatInt(int64(v), 10) }
func int32String(v int32) string     { return strconv.FormatInt(int64(v), 10) }
func int64String(v int64) string     { return strconv.FormatInt(v, 10) }
func int8String(v int8) string       { return strconv.FormatInt(int64(v), 10) }
func uint16String(v uint16) string   { return strconv.FormatUint(uint64(v), 10) }
func uint32String(v uint32) string   { return strconv.FormatUint(uint64(v), 10) }
func uint64String(v uint64) string   { return strconv.FormatUint(v, 10) }
func uint8String(v uint8) string     { return strconv.FormatUint(uint64(v), 10) }
func stringString(v string) string   { return v }

func {{$InternalPrefix}}charSize(v char) int       { return 1 }
func {{$InternalPrefix}}doubleSize(v double) int   { return 8 }
func {{$InternalPrefix}}floatSize(v float) int     { return 4 }
func {{$InternalPrefix}}float32Size(v float32) int { return 4 }
func {{$InternalPrefix}}float64Size(v float64) int { return 8 }
func {{$InternalPrefix}}int16Size(v int16) int     { return 2 }
func {{$InternalPrefix}}int32Size(v int32) int     { return 4 }
func {{$InternalPrefix}}int64Size(v int64) int     { return 8 }
func {{$InternalPrefix}}int8Size(v int8) int       { return 1 }
func {{$InternalPrefix}}uint16Size(v uint16) int   { return 2 }
func {{$InternalPrefix}}uint32Size(v uint32) int   { return 4 }
func {{$InternalPrefix}}uint64Size(v uint64) int   { return 8 }
func {{$InternalPrefix}}uint8Size(v uint8) int     { return 1 }
func {{$InternalPrefix}}stringSize(v string) int   { return 4 + len(v) }

func {{$InternalPrefix}}charSliceSize(v []char) int       { return len(v) }
func {{$InternalPrefix}}int8SliceSize(v []int8) int       { return len(v) }
func {{$InternalPrefix}}uint8SliceSize(v []uint8) int     { return len(v) }
func {{$InternalPrefix}}doubleSliceSize(v []double) int   { return len(v)*8 }
func {{$InternalPrefix}}floatSliceSize(v []float) int     { return len(v)*4 }
func {{$InternalPrefix}}float32SliceSize(v []float32) int { return len(v)*4 }
func {{$InternalPrefix}}float64SliceSize(v []float64) int { return len(v)*8 }
func {{$InternalPrefix}}int16SliceSize(v []int16) int     { return len(v)*2 }
func {{$InternalPrefix}}int32SliceSize(v []int32) int     { return len(v)*4 }
func {{$InternalPrefix}}int64SliceSize(v []int64) int     { return len(v)*8 }
func {{$InternalPrefix}}uint16SliceSize(v []uint16) int   { return len(v)*2 }
func {{$InternalPrefix}}uint32SliceSize(v []uint32) int   { return len(v)*4 }
func {{$InternalPrefix}}uint64SliceSize(v []uint64) int   { return len(v)*8 }
func {{$InternalPrefix}}stringSliceSize(v []string) int   { return {{$InternalPrefix}}stringArraySize(v) }

func {{$InternalPrefix}}stringArraySize(v []string) int {
	size := 0

	for _, s := range v {
		size += {{$InternalPrefix}}stringSize(s)
	}

	return size
}

type Writer interface {
	WriteByte(v byte) error
	WriteString(v string) (int, error)
	Write(v []byte) (int, error)
}

func {{$InternalPrefix}}stringWrite(w Writer, v string) (int, error) {
	size := 0

	n, err := {{$InternalPrefix}}uint32Write(w, uint32(len(v)))
	if err != nil {
		return size + n, err
	}

	size += n

	n, err = w.WriteString(v)

	return size + n, err
}

func {{$InternalPrefix}}charWrite(w Writer, v char) (int, error)       { return 1, w.WriteByte(v) }
func {{$InternalPrefix}}int8Write(w Writer, v int8) (int, error)       { return 1, w.WriteByte(byte(v)) }
func {{$InternalPrefix}}uint8Write(w Writer, v uint8) (int, error)     { return 1, w.WriteByte(v) }
func {{$InternalPrefix}}floatWrite(w Writer, v float) (int, error)     { return {{$InternalPrefix}}uint32Write(w, math.Float32bits(v)) }
func {{$InternalPrefix}}float32Write(w Writer, v float32) (int, error) { return {{$InternalPrefix}}uint32Write(w, math.Float32bits(v)) }
func {{$InternalPrefix}}float64Write(w Writer, v float64) (int, error) { return {{$InternalPrefix}}uint64Write(w, math.Float64bits(v)) }
func {{$InternalPrefix}}doubleWrite(w Writer, v double) (int, error)   { return {{$InternalPrefix}}uint64Write(w, math.Float64bits(v)) }
func {{$InternalPrefix}}int16Write(w Writer, v int16) (int, error)     { return {{$InternalPrefix}}uint16Write(w, uint16(v)) }
func {{$InternalPrefix}}int32Write(w Writer, v int32) (int, error)     { return {{$InternalPrefix}}uint32Write(w, uint32(v)) }
func {{$InternalPrefix}}int64Write(w Writer, v int64) (int, error)     { return {{$InternalPrefix}}uint64Write(w, uint64(v)) }

func {{$InternalPrefix}}uint16Write(w Writer, v uint16) (int, error) {
	buf := make([]byte, 2)

	binary.LittleEndian.PutUint16(buf, v)

	return w.Write(buf)
}

func {{$InternalPrefix}}uint32Write(w Writer, v uint32) (int, error) {
	buf := make([]byte, 4)

	binary.LittleEndian.PutUint32(buf, v)

	return w.Write(buf)
}

func {{$InternalPrefix}}uint64Write(w Writer, v uint64) (int, error) {
	buf := make([]byte, 8)

	binary.LittleEndian.PutUint64(buf, v)

	return w.Write(buf)
}

func {{$InternalPrefix}}charArrayWrite(w Writer, l []char) (int, error) {
	return w.Write(l)
}

func {{$InternalPrefix}}int8ArrayWrite(w Writer, l []int8) (int, error) {
	return w.Write(*(*[]byte)(unsafe.Pointer(&l)))
}

func {{$InternalPrefix}}uint8ArrayWrite(w Writer, l []uint8) (int, error) {
	return w.Write(l)
}

{{range $TypeName := ListStrings "int16" "uint16" "int32" "uint32" "int64" "uint64" "float" "float32" "float64" "double" "string" -}}
func {{$InternalPrefix}}{{$TypeName}}ArrayWrite(w Writer, l []{{$TypeName}}) (int, error) {
	size := 0

	for _, v := range l {
		n, err := {{$InternalPrefix}}{{$TypeName}}Write(w, v)
		if err != nil {
			return size + n, err
		}

		size += n
	}

	return size, nil
}

{{end}}

{{range $TypeName := ListStrings "int16" "uint16" "int32" "uint32" "int64" "uint64" "float" "float32" "float64" "double" "string" "char" "int8" "uint8" -}}
func {{$InternalPrefix}}{{$TypeName}}SliceWrite(w Writer, l []{{$TypeName}}) (int, error) {
	size := 0

	n, err := {{$InternalPrefix}}uint32Write(w, uint32(len(l)))
	if err != nil {
		return size + n, err
	}

	size += n

	n, err = {{$InternalPrefix}}{{$TypeName}}ArrayWrite(w, l)

	return size + n, err
}

{{end}}

type Reader interface {
	ReadByte() (byte, error)
	Read(p []byte) (int, error)
}

func {{$InternalPrefix}}charRead(r Reader) (char, error)       { return r.ReadByte() }
func {{$InternalPrefix}}int8Read(r Reader) (int8, error)       { n, err := r.ReadByte(); return int8(n), err }
func {{$InternalPrefix}}uint8Read(r Reader) (uint8, error)     { return r.ReadByte() }
func {{$InternalPrefix}}floatRead(r Reader) (float, error)     { n, err := {{$InternalPrefix}}uint32Read(r); return math.Float32frombits(n), err }
func {{$InternalPrefix}}float32Read(r Reader) (float32, error) { n, err := {{$InternalPrefix}}uint32Read(r); return math.Float32frombits(n), err }
func {{$InternalPrefix}}float64Read(r Reader) (float64, error) { n, err := {{$InternalPrefix}}uint64Read(r); return math.Float64frombits(n), err }
func {{$InternalPrefix}}doubleRead(r Reader) (double, error)   { n, err := {{$InternalPrefix}}uint64Read(r); return math.Float64frombits(n), err }
func {{$InternalPrefix}}int16Read(r Reader) (int16, error)     { n, err := {{$InternalPrefix}}uint16Read(r); return int16(n), err }
func {{$InternalPrefix}}int32Read(r Reader) (int32, error)     { n, err := {{$InternalPrefix}}uint32Read(r); return int32(n), err }
func {{$InternalPrefix}}int64Read(r Reader) (int64, error)     { n, err := {{$InternalPrefix}}uint64Read(r); return int64(n), err }

func {{$InternalPrefix}}stringRead(r Reader) (string, error) {
	l, err := {{$InternalPrefix}}uint32Read(r)
	if err != nil {
		return "", err
	}

	b := make([]byte, l)

	_, err = io.ReadFull(r, b)

	return string(b), err
}

func {{$InternalPrefix}}uint16Read(r Reader) (uint16, error) {
	b := make([]byte, 2)

	_, err := io.ReadFull(r, b)

	return binary.LittleEndian.Uint16(b), err
}

func {{$InternalPrefix}}uint32Read(r Reader) (uint32, error) {
	b := make([]byte, 4)

	_, err := io.ReadFull(r, b)

	return binary.LittleEndian.Uint32(b), err
}

func {{$InternalPrefix}}uint64Read(r Reader) (uint64, error) {
	b := make([]byte, 8)

	_, err := io.ReadFull(r, b)

	return binary.LittleEndian.Uint64(b), err
}

func {{$InternalPrefix}}byteArrayRead(r Reader, out []byte) error {
	_, err := io.ReadFull(r, out)

	return err
}

func {{$InternalPrefix}}charArrayRead(r Reader, out []char) error {
	return {{$InternalPrefix}}byteArrayRead(r, out)
}

func {{$InternalPrefix}}uint8ArrayRead(r Reader, out []uint8) error {
	return {{$InternalPrefix}}byteArrayRead(r, out)
}

func {{$InternalPrefix}}int8ArrayRead(r Reader, out []int8) error {
	return {{$InternalPrefix}}byteArrayRead(r, *(*[]byte)(unsafe.Pointer(&out)))
}

{{range $TypeName := ListStrings "int16" "uint16" "int32" "uint32" "int64" "uint64" "float" "float32" "float64" "double" "string" -}}
func {{$InternalPrefix}}{{$TypeName}}ArrayRead(r Reader, out []{{$TypeName}}) (error) {
	var err error

	for i := 0; i < len(out); i++ {
		if out[i], err = {{$InternalPrefix}}{{$TypeName}}Read(r); err != nil {
			return err
		}
	}

	return nil
}

{{end}}

{{range $TypeName := ListStrings "int16" "uint16" "int32" "uint32" "int64" "uint64" "float" "float32" "float64" "double" "string" "char" "int8" "uint8" -}}
func {{$InternalPrefix}}{{$TypeName}}SliceRead(r Reader) ([]{{$TypeName}}, error) {
	l, err := {{$InternalPrefix}}uint32Read(r)
	if err != nil {
		return nil, err
	}

	out := make([]{{$TypeName}}, l)

	err = {{$InternalPrefix}}{{$TypeName}}ArrayRead(r, out)

	return out, err
}

{{end}}
