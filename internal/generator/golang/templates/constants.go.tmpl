// Code generated by go-messgen. DO NOT EDIT.

{{$InternalPrefix := "int_"}}

package {{.Module.Protocol}}

import "strconv"
import "fmt"

var _ = strconv.FormatInt
var _ = fmt.Printf

const ProtoID = {{.Proto.ID}}

{{$Module := .}}
{{$Enums := .Enums}}

{{range $Enum := $Enums}}
type {{CamelCase $Enum.Name}} {{$Enum.BaseType}} // {{$Enum.Name}}

{{$EnumSize := MinSizeByName $Enum.Name $Module}}
const {{CamelCase $Enum.Name}}MinSize = {{$EnumSize.MinSize}}

func (v {{CamelCase $Enum.Name}}) Size() int { return {{CamelCase $Enum.Name}}MinSize }
func (v {{CamelCase $Enum.Name}}) String() string { return {{$Enum.BaseType}}String({{$Enum.BaseType}}(v)) }
func GetAll{{CamelCase $Enum.Name}}() [{{len $Enum.Values}}]{{CamelCase $Enum.Name}} {
    return [...]{{CamelCase $Enum.Name}}{
        {{range $Enum.Values -}}
        {{CamelCase .Name}},
        {{end -}}
    }
}

const (
    {{range $Enum.Values -}}
    {{CamelCase .Name}} {{CamelCase $Enum.Name}} = {{FixValue .Value}} // {{.Description}}
    {{end -}}
)

func {{$InternalPrefix}}{{CamelCase $Enum.Name}}Size(v {{CamelCase $Enum.Name}}) int { return {{CamelCase $Enum.Name}}MinSize }

func {{$InternalPrefix}}{{CamelCase $Enum.Name}}Write(w Writer, v {{CamelCase $Enum.Name}}) (int, error) { return {{$InternalPrefix}}{{$Enum.BaseType}}Write(w, {{$Enum.BaseType}}(v)) }

func {{$InternalPrefix}}{{CamelCase $Enum.Name}}Read(r Reader) ({{CamelCase $Enum.Name}}, error) {
    v, err := {{$InternalPrefix}}{{CamelCase $Enum.BaseType}}Read(r)

    return {{CamelCase $Enum.Name}}(v), err
}

func {{$InternalPrefix}}{{CamelCase $Enum.Name}}SliceSize(v []{{CamelCase $Enum.Name}}) int {
    return len(v) * {{CamelCase $Enum.Name}}MinSize
}

func {{$InternalPrefix}}{{CamelCase $Enum.Name}}SliceWrite(w Writer, l []{{CamelCase $Enum.Name}}) (int, error) {
	size := 0

	n, err := {{$InternalPrefix}}uint32Write(w, uint32(len(l)))
	if err != nil {
		return size + n, err
	}

	size += n

	n, err = {{$InternalPrefix}}{{CamelCase $Enum.Name}}ArrayWrite(w, l)

	return size+n, nil
}


func {{$InternalPrefix}}{{CamelCase $Enum.Name}}SliceRead(r Reader) ([]{{CamelCase $Enum.Name}}, error) {
	l, err := {{$InternalPrefix}}uint32Read(r)
	if err != nil {
		return nil, err
	}

	out := make([]{{CamelCase $Enum.Name}}, l)

	err = {{$InternalPrefix}}{{CamelCase $Enum.Name}}ArrayRead(r, out)

	return out, err
}


func {{$InternalPrefix}}{{CamelCase $Enum.Name}}ArrayWrite(w Writer, l []{{CamelCase $Enum.Name}}) (int, error) {
	size := 0

	for _, v := range l {
		n, err := {{$InternalPrefix}}{{CamelCase $Enum.Name}}Write(w, v)
		if err != nil {
			return size+n, err
		}

		size += n
	}

	return size, nil
}

func {{$InternalPrefix}}{{CamelCase $Enum.Name}}ArrayRead(r Reader, out []{{CamelCase $Enum.Name}}) error {
	var err error

	for i := 0; i < len(out); i++ {
		if out[i], err = {{$InternalPrefix}}{{CamelCase $Enum.Name}}Read(r); err != nil {
			return err
		}
	}

	return nil
}

////////////////////////////////////////////////////////////
{{end}}
